-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Pool is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of Pool is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Pool,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=11.265800,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=10,HLS_SYN_FF=3860,HLS_SYN_LUT=5011,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (75 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (75 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (75 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (75 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (75 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (75 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (75 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (75 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (75 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (75 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_5BB1A2BC : STD_LOGIC_VECTOR (31 downto 0) := "01011011101100011010001010111100";
    constant ap_const_lv32_DBB1A2BC : STD_LOGIC_VECTOR (31 downto 0) := "11011011101100011010001010111100";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal CHin_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Hin_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Win_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Kx_V : STD_LOGIC_VECTOR (7 downto 0);
    signal Ky_V : STD_LOGIC_VECTOR (7 downto 0);
    signal mode_V : STD_LOGIC_VECTOR (1 downto 0);
    signal feature_in : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_out : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal mode_V_read_reg_911 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Ky_V_read_reg_917 : STD_LOGIC_VECTOR (7 downto 0);
    signal Kx_V_read_reg_922 : STD_LOGIC_VECTOR (7 downto 0);
    signal Win_V_read_reg_927 : STD_LOGIC_VECTOR (15 downto 0);
    signal CHin_V_read_reg_938 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_reg_945 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_3_reg_950 : STD_LOGIC_VECTOR (29 downto 0);
    signal lhs_V_fu_406_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_reg_955 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_fu_416_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_reg_962 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_fu_426_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_reg_969 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_30_cast_fu_434_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_30_cast_reg_979 : STD_LOGIC_VECTOR (48 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_31_cast_fu_437_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_31_cast_reg_984 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_410_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_16_reg_991 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_420_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_reg_996 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1001 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_1_fu_450_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_1_reg_1005 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_2_fu_453_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_V_2_reg_1014 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_378_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1019 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_1_cast_fu_456_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_1_cast_reg_1024 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_2_cast_fu_460_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_V_2_cast_reg_1029 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_sum_fu_477_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_sum_reg_1034 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_18_cast6_fu_485_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_18_cast6_reg_1039 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal c_fu_494_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal c_reg_1047 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_7_cast_fu_500_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_V_7_cast_reg_1052 : STD_LOGIC_VECTOR (47 downto 0);
    signal exitcond1_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul1_fu_504_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul1_reg_1059 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal next_mul2_fu_509_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul2_reg_1064 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_fu_519_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_1072 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_2_fu_529_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal ret_V_2_reg_1077 : STD_LOGIC_VECTOR (47 downto 0);
    signal exitcond2_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul9_fu_534_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul9_reg_1082 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal next_mul_fu_539_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_1087 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_549_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_reg_1095 : STD_LOGIC_VECTOR (15 downto 0);
    signal ii_fu_560_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ii_reg_1103 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ret_V_3_fu_885_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_3_reg_1108 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_4_fu_583_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal ret_V_4_reg_1113 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal jj_fu_593_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal jj_reg_1123 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal w_V_fu_603_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_V_reg_1128 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond4_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_3_reg_1135 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal gmem_addr_2_reg_1141 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_3_read_reg_1147 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state35 : BOOLEAN;
    signal gmem_addr_2_read_reg_1154 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_1161 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal tmp_17_reg_1166 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_3_feature_in_loa_fu_735_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal feature_in_load_1_su_fu_824_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_1_reg_1181 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal gmem_addr_1_read_reg_1187 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_368_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_reg_1192 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal grp_fu_373_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal tmp_8_fu_862_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_8_reg_1202 : STD_LOGIC_VECTOR (47 downto 0);
    signal gmem_addr_reg_1207 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal op_assign_reg_216 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_s_reg_227 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul1_reg_238 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_5_reg_250 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_1_reg_261 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_10_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul8_reg_284 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_reg_296 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_2_reg_306 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_3_reg_317 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal i_op_assign_3_reg_329 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_3_be_reg_340 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal sum_5_reg_356 : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_in2_sum_cast_fu_621_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal feature_in2_sum5_cas_fu_643_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal feature_in2_sum6_cas_fu_843_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal feature_out4_sum_cas_fu_875_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_gmem_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem_ARREADY : STD_LOGIC;
    signal ap_block_state28_io : BOOLEAN;
    signal ap_reg_ioackin_gmem_AWREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem_AWREADY : STD_LOGIC;
    signal ap_reg_ioackin_gmem_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem_WREADY : STD_LOGIC;
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_fu_378_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_381_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_410_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_420_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_fu_426_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_fu_426_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_fu_463_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_2_fu_529_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_2_fu_529_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_566_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal h_V_fu_570_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_4_fu_583_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_4_fu_583_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_599_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_890_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal ret_V_15_fu_612_p2 : STD_LOGIC_VECTOR (47 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of ret_V_15_fu_612_p2 : signal is "no";
    signal feature_in2_sum_fu_616_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_897_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal ret_V_12_fu_634_p2 : STD_LOGIC_VECTOR (47 downto 0);
    attribute use_dsp48 of ret_V_12_fu_634_p2 : signal is "no";
    signal feature_in2_sum5_fu_638_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal sum_3_to_int1_fu_653_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_in_load_2_to_fu_671_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_657_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_667_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_674_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_684_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs3_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_fu_706_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_718_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_3_to_int_fu_742_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_in_load_1_to_fu_760_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_746_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_756_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs1_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_777_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_763_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_773_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs2_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_904_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal ret_V_8_fu_834_p2 : STD_LOGIC_VECTOR (47 downto 0);
    attribute use_dsp48 of ret_V_8_fu_834_p2 : signal is "no";
    signal feature_in2_sum6_fu_838_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp1_fu_853_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_cast_fu_858_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_16_cast_cast_fu_867_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal feature_out4_sum_fu_870_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal ret_V_3_fu_885_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_890_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_897_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_904_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_410_ap_start : STD_LOGIC;
    signal grp_fu_410_ap_done : STD_LOGIC;
    signal grp_fu_420_ap_start : STD_LOGIC;
    signal grp_fu_420_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (75 downto 0);
    signal grp_fu_410_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_420_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_2_fu_529_p00 : STD_LOGIC_VECTOR (47 downto 0);

    component Pool_fadd_32ns_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_fdiv_32ns_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_uitofp_32ns_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_fcmp_32ns_32eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Pool_udiv_16ns_8nfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Pool_mul_mul_16s_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_mac_muladd_1hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (47 downto 0);
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component Pool_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        CHin_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Hin_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Win_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Kx_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        Ky_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        mode_V : OUT STD_LOGIC_VECTOR (1 downto 0);
        feature_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        feature_out : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    Pool_AXILiteS_s_axi_U : component Pool_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        CHin_V => CHin_V,
        Hin_V => Hin_V,
        Win_V => Win_V,
        Kx_V => Kx_V,
        Ky_V => Ky_V,
        mode_V => mode_V,
        feature_in => feature_in,
        feature_out => feature_out);

    Pool_gmem_m_axi_U : component Pool_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_addr_reg_1207,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => sum_5_reg_356,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    Pool_fadd_32ns_32bkb_U1 : component Pool_fadd_32ns_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => sum_3_reg_317,
        din1 => gmem_addr_1_read_reg_1187,
        ce => ap_const_logic_1,
        dout => grp_fu_368_p2);

    Pool_fdiv_32ns_32cud_U2 : component Pool_fdiv_32ns_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => i_op_assign_reg_296,
        din1 => tmp_s_reg_1019,
        ce => ap_const_logic_1,
        dout => grp_fu_373_p2);

    Pool_uitofp_32ns_dEe_U3 : component Pool_uitofp_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_378_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_378_p1);

    Pool_fcmp_32ns_32eOg_U4 : component Pool_fcmp_32ns_32eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => sum_3_reg_317,
        din1 => grp_fu_381_p1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_381_p2);

    Pool_udiv_16ns_8nfYi_U5 : component Pool_udiv_16ns_8nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_410_ap_start,
        done => grp_fu_410_ap_done,
        din0 => Win_V,
        din1 => grp_fu_410_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_410_p2);

    Pool_udiv_16ns_8nfYi_U6 : component Pool_udiv_16ns_8nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_420_ap_start,
        done => grp_fu_420_ap_done,
        din0 => Hin_V,
        din1 => grp_fu_420_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_420_p2);

    Pool_mul_mul_16s_g8j_U7 : component Pool_mul_mul_16s_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => h_V_fu_570_p2,
        din1 => ret_V_3_fu_885_p1,
        dout => ret_V_3_fu_885_p2);

    Pool_mac_muladd_1hbi_U8 : component Pool_mac_muladd_1hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 48,
        dout_WIDTH => 48)
    port map (
        din0 => grp_fu_890_p0,
        din1 => w_V_reg_1128,
        din2 => ret_V_4_reg_1113,
        dout => grp_fu_890_p3);

    Pool_mac_muladd_1hbi_U9 : component Pool_mac_muladd_1hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 48,
        dout_WIDTH => 48)
    port map (
        din0 => grp_fu_897_p0,
        din1 => w_V_reg_1128,
        din2 => ret_V_4_reg_1113,
        dout => grp_fu_897_p3);

    Pool_mac_muladd_1hbi_U10 : component Pool_mac_muladd_1hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 48,
        dout_WIDTH => 48)
    port map (
        din0 => grp_fu_904_p0,
        din1 => w_V_reg_1128,
        din2 => ret_V_4_reg_1113,
        dout => grp_fu_904_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_state28_io) and (ap_const_logic_1 = ap_CS_fsm_state28) and (mode_V_read_reg_911 = ap_const_lv2_2)) or ((ap_const_boolean_0 = ap_block_state28_io) and (ap_const_logic_1 = ap_CS_fsm_state28) and (mode_V_read_reg_911 = ap_const_lv2_1)) or ((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
                elsif ((((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28) and (mode_V_read_reg_911 = ap_const_lv2_2)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28) and (mode_V_read_reg_911 = ap_const_lv2_1)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state70)) then
                    if ((ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
                    elsif ((gmem_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                    if ((ap_sig_ioackin_gmem_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
                    elsif ((gmem_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i_op_assign_1_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_514_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                i_op_assign_1_reg_261 <= ap_const_lv16_0;
            elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
                i_op_assign_1_reg_261 <= j_reg_1095;
            end if; 
        end if;
    end process;

    i_op_assign_2_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_544_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                i_op_assign_2_reg_306 <= ap_const_lv8_0;
            elsif (((exitcond4_fu_588_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                i_op_assign_2_reg_306 <= ii_reg_1103;
            end if; 
        end if;
    end process;

    i_op_assign_3_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                i_op_assign_3_reg_329 <= jj_reg_1123;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                i_op_assign_3_reg_329 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_op_assign_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_544_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                i_op_assign_reg_296 <= p_sum_reg_1034;
            elsif (((exitcond4_fu_588_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                i_op_assign_reg_296 <= sum_3_reg_317;
            end if; 
        end if;
    end process;

    i_op_assign_s_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_544_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                i_op_assign_s_reg_227 <= i_reg_1072;
            elsif (((exitcond1_fu_489_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                i_op_assign_s_reg_227 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    op_assign_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_514_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                op_assign_reg_216 <= c_reg_1047;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                op_assign_reg_216 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_544_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                phi_mul1_reg_238 <= next_mul2_reg_1064;
            elsif (((exitcond1_fu_489_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                phi_mul1_reg_238 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    phi_mul8_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_514_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                phi_mul8_reg_284 <= ap_const_lv16_0;
            elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
                phi_mul8_reg_284 <= next_mul9_reg_1082;
            end if; 
        end if;
    end process;

    ret_V_10_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_514_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                ret_V_10_reg_272 <= ap_const_lv32_0;
            elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
                ret_V_10_reg_272 <= next_mul_reg_1087;
            end if; 
        end if;
    end process;

    ret_V_5_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_544_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                ret_V_5_reg_250 <= next_mul1_reg_1059;
            elsif (((exitcond1_fu_489_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                ret_V_5_reg_250 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_3_be_reg_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) and (mode_V_read_reg_911 = ap_const_lv2_2))) then 
                sum_3_be_reg_340 <= sum_3_feature_in_loa_fu_735_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state37) and (mode_V_read_reg_911 = ap_const_lv2_1))) then 
                sum_3_be_reg_340 <= feature_in_load_1_su_fu_824_p3;
            elsif (((exitcond4_fu_588_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26) and (mode_V_read_reg_911 = ap_const_lv2_3))) then 
                sum_3_be_reg_340 <= sum_3_reg_317;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                sum_3_be_reg_340 <= sum_2_reg_1192;
            end if; 
        end if;
    end process;

    sum_3_reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                sum_3_reg_317 <= sum_3_be_reg_340;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                sum_3_reg_317 <= i_op_assign_reg_296;
            end if; 
        end if;
    end process;

    sum_5_reg_356_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_555_p2 = ap_const_lv1_1) and (tmp_6_reg_1001 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                sum_5_reg_356 <= i_op_assign_reg_296;
            elsif (((tmp_6_reg_1001 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state68))) then 
                sum_5_reg_356 <= grp_fu_373_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                CHin_V_read_reg_938 <= CHin_V;
                Kx_V_read_reg_922 <= Kx_V;
                Ky_V_read_reg_917 <= Ky_V;
                Win_V_read_reg_927 <= Win_V;
                    lhs_V_reg_955(7 downto 0) <= lhs_V_fu_406_p1(7 downto 0);
                mode_V_read_reg_911 <= mode_V;
                    rhs_V_reg_962(7 downto 0) <= rhs_V_fu_416_p1(7 downto 0);
                tmp_2_reg_945 <= feature_out(31 downto 2);
                tmp_3_reg_950 <= feature_in(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                c_reg_1047 <= c_fu_494_p2;
                    i_op_assign_18_cast6_reg_1039(15 downto 0) <= i_op_assign_18_cast6_fu_485_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                gmem_addr_1_read_reg_1187 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                gmem_addr_1_reg_1181 <= feature_in2_sum6_cas_fu_843_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((gmem_RVALID = ap_const_logic_0) and (mode_V_read_reg_911 = ap_const_lv2_2)) or ((gmem_RVALID = ap_const_logic_0) and (mode_V_read_reg_911 = ap_const_lv2_1)))) and (ap_const_logic_1 = ap_CS_fsm_state35) and (mode_V_read_reg_911 = ap_const_lv2_1))) then
                gmem_addr_2_read_reg_1154 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (mode_V_read_reg_911 = ap_const_lv2_1))) then
                gmem_addr_2_reg_1141 <= feature_in2_sum5_cas_fu_643_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((gmem_RVALID = ap_const_logic_0) and (mode_V_read_reg_911 = ap_const_lv2_2)) or ((gmem_RVALID = ap_const_logic_0) and (mode_V_read_reg_911 = ap_const_lv2_1)))) and (ap_const_logic_1 = ap_CS_fsm_state35) and (mode_V_read_reg_911 = ap_const_lv2_2))) then
                gmem_addr_3_read_reg_1147 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (mode_V_read_reg_911 = ap_const_lv2_2))) then
                gmem_addr_3_reg_1135 <= feature_in2_sum_cast_fu_621_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                gmem_addr_reg_1207 <= feature_out4_sum_cas_fu_875_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                i_reg_1072 <= i_fu_519_p2;
                next_mul1_reg_1059 <= next_mul1_fu_504_p2;
                next_mul2_reg_1064 <= next_mul2_fu_509_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                ii_reg_1103 <= ii_fu_560_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                j_reg_1095 <= j_fu_549_p2;
                next_mul9_reg_1082 <= next_mul9_fu_534_p2;
                next_mul_reg_1087 <= next_mul_fu_539_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                jj_reg_1123 <= jj_fu_593_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                    p_sum_reg_1034(5 downto 2) <= p_sum_fu_477_p3(5 downto 2);    p_sum_reg_1034(7) <= p_sum_fu_477_p3(7);    p_sum_reg_1034(9) <= p_sum_fu_477_p3(9);    p_sum_reg_1034(13) <= p_sum_fu_477_p3(13);    p_sum_reg_1034(16 downto 15) <= p_sum_fu_477_p3(16 downto 15);    p_sum_reg_1034(21 downto 20) <= p_sum_fu_477_p3(21 downto 20);    p_sum_reg_1034(25 downto 23) <= p_sum_fu_477_p3(25 downto 23);    p_sum_reg_1034(28 downto 27) <= p_sum_fu_477_p3(28 downto 27);    p_sum_reg_1034(31 downto 30) <= p_sum_fu_477_p3(31 downto 30);
                ret_V_16_reg_991 <= grp_fu_410_p2;
                    rhs_V_1_cast_reg_1024(15 downto 0) <= rhs_V_1_cast_fu_456_p1(15 downto 0);
                    rhs_V_1_reg_1005(15 downto 0) <= rhs_V_1_fu_450_p1(15 downto 0);
                    rhs_V_2_cast_reg_1029(15 downto 0) <= rhs_V_2_cast_fu_460_p1(15 downto 0);
                    rhs_V_2_reg_1014(15 downto 0) <= rhs_V_2_fu_453_p1(15 downto 0);
                    tmp_30_cast_reg_979(29 downto 0) <= tmp_30_cast_fu_434_p1(29 downto 0);
                    tmp_31_cast_reg_984(29 downto 0) <= tmp_31_cast_fu_437_p1(29 downto 0);
                tmp_4_reg_996 <= grp_fu_420_p2;
                tmp_6_reg_1001 <= tmp_6_fu_440_p2;
                tmp_s_reg_1019 <= grp_fu_378_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_514_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                ret_V_2_reg_1077 <= ret_V_2_fu_529_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_555_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                ret_V_3_reg_1108 <= ret_V_3_fu_885_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                ret_V_4_reg_1113 <= ret_V_4_fu_583_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                ret_V_reg_969 <= ret_V_fu_426_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_489_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    rhs_V_7_cast_reg_1052(15 downto 0) <= rhs_V_7_cast_fu_500_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                sum_2_reg_1192 <= grp_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) and (mode_V_read_reg_911 = ap_const_lv2_1))) then
                tmp_17_reg_1166 <= grp_fu_381_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) and (mode_V_read_reg_911 = ap_const_lv2_2))) then
                tmp_26_reg_1161 <= grp_fu_381_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state68)) then
                tmp_8_reg_1202 <= tmp_8_fu_862_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_588_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                w_V_reg_1128 <= w_V_fu_603_p2;
            end if;
        end if;
    end process;
    lhs_V_reg_955(15 downto 8) <= "00000000";
    rhs_V_reg_962(15 downto 8) <= "00000000";
    tmp_30_cast_reg_979(48 downto 30) <= "0000000000000000000";
    tmp_31_cast_reg_984(47 downto 30) <= "000000000000000000";
    rhs_V_1_reg_1005(31 downto 16) <= "0000000000000000";
    rhs_V_2_reg_1014(47 downto 16) <= "00000000000000000000000000000000";
    rhs_V_1_cast_reg_1024(31 downto 16) <= "0000000000000000";
    rhs_V_2_cast_reg_1029(47 downto 16) <= "00000000000000000000000000000000";
    p_sum_reg_1034(1 downto 0) <= "00";
    p_sum_reg_1034(6 downto 6) <= "0";
    p_sum_reg_1034(8 downto 8) <= "0";
    p_sum_reg_1034(12 downto 10) <= "000";
    p_sum_reg_1034(14 downto 14) <= "0";
    p_sum_reg_1034(19 downto 17) <= "000";
    p_sum_reg_1034(22 downto 22) <= "0";
    p_sum_reg_1034(26 downto 26) <= "0";
    p_sum_reg_1034(29) <= '0';
    i_op_assign_18_cast6_reg_1039(31 downto 16) <= "0000000000000000";
    rhs_V_7_cast_reg_1052(47 downto 16) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state39, ap_CS_fsm_state46, ap_CS_fsm_state28, mode_V_read_reg_911, ap_CS_fsm_state35, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state76, gmem_RVALID, gmem_BVALID, tmp_6_reg_1001, ap_CS_fsm_state21, exitcond1_fu_489_p2, ap_CS_fsm_state22, exitcond2_fu_514_p2, ap_CS_fsm_state23, ap_CS_fsm_state24, exitcond3_fu_555_p2, ap_CS_fsm_state26, exitcond4_fu_588_p2, exitcond_fu_544_p2, ap_sig_ioackin_gmem_ARREADY, ap_block_state28_io, ap_sig_ioackin_gmem_AWREADY, ap_sig_ioackin_gmem_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((exitcond1_fu_489_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                if (((exitcond2_fu_514_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                if (((exitcond_fu_544_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state24 => 
                if (((exitcond3_fu_555_p2 = ap_const_lv1_1) and (tmp_6_reg_1001 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                elsif (((exitcond3_fu_555_p2 = ap_const_lv1_1) and (tmp_6_reg_1001 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((exitcond4_fu_588_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                elsif (((exitcond4_fu_588_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26) and (mode_V_read_reg_911 = ap_const_lv2_3))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                elsif (((exitcond4_fu_588_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26) and (mode_V_read_reg_911 = ap_const_lv2_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((ap_const_boolean_0 = ap_block_state28_io) and (ap_const_logic_1 = ap_CS_fsm_state28) and ((mode_V_read_reg_911 = ap_const_lv2_2) or (mode_V_read_reg_911 = ap_const_lv2_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                if ((not((((gmem_RVALID = ap_const_logic_0) and (mode_V_read_reg_911 = ap_const_lv2_2)) or ((gmem_RVALID = ap_const_logic_0) and (mode_V_read_reg_911 = ap_const_lv2_1)))) and (ap_const_logic_1 = ap_CS_fsm_state35) and ((mode_V_read_reg_911 = ap_const_lv2_2) or (mode_V_read_reg_911 = ap_const_lv2_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                if (((ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when ap_ST_fsm_state71 => 
                if (((ap_sig_ioackin_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                    ap_NS_fsm <= ap_ST_fsm_state72;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);

    ap_block_state28_io_assign_proc : process(mode_V_read_reg_911, ap_sig_ioackin_gmem_ARREADY)
    begin
                ap_block_state28_io <= (((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_0) and (mode_V_read_reg_911 = ap_const_lv2_2)) or ((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_0) and (mode_V_read_reg_911 = ap_const_lv2_1)));
    end process;


    ap_block_state35_assign_proc : process(mode_V_read_reg_911, gmem_RVALID)
    begin
                ap_block_state35 <= (((gmem_RVALID = ap_const_logic_0) and (mode_V_read_reg_911 = ap_const_lv2_2)) or ((gmem_RVALID = ap_const_logic_0) and (mode_V_read_reg_911 = ap_const_lv2_1)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state21, exitcond1_fu_489_p2)
    begin
        if (((exitcond1_fu_489_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state21, exitcond1_fu_489_p2)
    begin
        if (((exitcond1_fu_489_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_gmem_ARREADY_assign_proc : process(gmem_ARREADY, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_ARREADY <= gmem_ARREADY;
        else 
            ap_sig_ioackin_gmem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_AWREADY_assign_proc : process(gmem_AWREADY, ap_reg_ioackin_gmem_AWREADY)
    begin
        if ((ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_AWREADY <= gmem_AWREADY;
        else 
            ap_sig_ioackin_gmem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_WREADY_assign_proc : process(gmem_WREADY, ap_reg_ioackin_gmem_WREADY)
    begin
        if ((ap_reg_ioackin_gmem_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_WREADY <= gmem_WREADY;
        else 
            ap_sig_ioackin_gmem_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    c_fu_494_p2 <= std_logic_vector(unsigned(op_assign_reg_216) + unsigned(ap_const_lv16_1));
    exitcond1_fu_489_p2 <= "1" when (op_assign_reg_216 = CHin_V_read_reg_938) else "0";
    exitcond2_fu_514_p2 <= "1" when (i_op_assign_s_reg_227 = tmp_4_reg_996) else "0";
    exitcond3_fu_555_p2 <= "1" when (i_op_assign_2_reg_306 = Ky_V_read_reg_917) else "0";
    exitcond4_fu_588_p2 <= "1" when (i_op_assign_3_reg_329 = Kx_V_read_reg_922) else "0";
    exitcond_fu_544_p2 <= "1" when (i_op_assign_1_reg_261 = ret_V_16_reg_991) else "0";
        feature_in2_sum5_cas_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(feature_in2_sum5_fu_638_p2),64));

    feature_in2_sum5_fu_638_p2 <= std_logic_vector(unsigned(tmp_31_cast_reg_984) + unsigned(ret_V_12_fu_634_p2));
        feature_in2_sum6_cas_fu_843_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(feature_in2_sum6_fu_838_p2),64));

    feature_in2_sum6_fu_838_p2 <= std_logic_vector(unsigned(ret_V_8_fu_834_p2) + unsigned(tmp_31_cast_reg_984));
        feature_in2_sum_cast_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(feature_in2_sum_fu_616_p2),64));

    feature_in2_sum_fu_616_p2 <= std_logic_vector(unsigned(tmp_31_cast_reg_984) + unsigned(ret_V_15_fu_612_p2));
    feature_in_load_1_su_fu_824_p3 <= 
        gmem_addr_2_read_reg_1154 when (tmp_18_fu_819_p2(0) = '1') else 
        sum_3_reg_317;
    feature_in_load_1_to_fu_760_p1 <= gmem_addr_2_read_reg_1154;
    feature_in_load_2_to_fu_671_p1 <= gmem_addr_3_read_reg_1147;
    feature_out4_sum_cas_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(feature_out4_sum_fu_870_p2),64));
    feature_out4_sum_fu_870_p2 <= std_logic_vector(unsigned(tmp_16_cast_cast_fu_867_p1) + unsigned(tmp_30_cast_reg_979));

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state39, ap_CS_fsm_state28, mode_V_read_reg_911, gmem_addr_3_reg_1135, gmem_addr_2_reg_1141, gmem_addr_1_reg_1181, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                gmem_ARADDR <= gmem_addr_1_reg_1181;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (mode_V_read_reg_911 = ap_const_lv2_1))) then 
                gmem_ARADDR <= gmem_addr_2_reg_1141;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (mode_V_read_reg_911 = ap_const_lv2_2))) then 
                gmem_ARADDR <= gmem_addr_3_reg_1135;
            else 
                gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state39, ap_CS_fsm_state28, mode_V_read_reg_911, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state28) and (mode_V_read_reg_911 = ap_const_lv2_2)) or ((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state28) and (mode_V_read_reg_911 = ap_const_lv2_1)) or ((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state70, ap_reg_ioackin_gmem_AWREADY)
    begin
        if (((ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state76, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state46, mode_V_read_reg_911, ap_CS_fsm_state35, gmem_RVALID)
    begin
        if (((not((((gmem_RVALID = ap_const_logic_0) and (mode_V_read_reg_911 = ap_const_lv2_2)) or ((gmem_RVALID = ap_const_logic_0) and (mode_V_read_reg_911 = ap_const_lv2_1)))) and (ap_const_logic_1 = ap_CS_fsm_state35) and (mode_V_read_reg_911 = ap_const_lv2_2)) or (not((((gmem_RVALID = ap_const_logic_0) and (mode_V_read_reg_911 = ap_const_lv2_2)) or ((gmem_RVALID = ap_const_logic_0) and (mode_V_read_reg_911 = ap_const_lv2_1)))) and (ap_const_logic_1 = ap_CS_fsm_state35) and (mode_V_read_reg_911 = ap_const_lv2_1)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state71, ap_reg_ioackin_gmem_WREADY)
    begin
        if (((ap_reg_ioackin_gmem_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state39, ap_CS_fsm_state28, mode_V_read_reg_911)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (mode_V_read_reg_911 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (mode_V_read_reg_911 = ap_const_lv2_1)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state46, mode_V_read_reg_911, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or ((ap_const_logic_1 = ap_CS_fsm_state35) and (mode_V_read_reg_911 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state35) and (mode_V_read_reg_911 = ap_const_lv2_1)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_378_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_969),32));

    grp_fu_381_p1_assign_proc : process(mode_V_read_reg_911, gmem_addr_3_read_reg_1147, gmem_addr_2_read_reg_1154, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
            if ((mode_V_read_reg_911 = ap_const_lv2_1)) then 
                grp_fu_381_p1 <= gmem_addr_2_read_reg_1154;
            elsif ((mode_V_read_reg_911 = ap_const_lv2_2)) then 
                grp_fu_381_p1 <= gmem_addr_3_read_reg_1147;
            else 
                grp_fu_381_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_381_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_410_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_410_ap_start <= ap_const_logic_1;
        else 
            grp_fu_410_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_410_p1 <= grp_fu_410_p10(8 - 1 downto 0);
    grp_fu_410_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Kx_V),16));

    grp_fu_420_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_420_ap_start <= ap_const_logic_1;
        else 
            grp_fu_420_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_420_p1 <= grp_fu_420_p10(8 - 1 downto 0);
    grp_fu_420_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Ky_V),16));
    grp_fu_890_p0 <= rhs_V_1_reg_1005(16 - 1 downto 0);
    grp_fu_897_p0 <= rhs_V_1_reg_1005(16 - 1 downto 0);
    grp_fu_904_p0 <= rhs_V_1_reg_1005(16 - 1 downto 0);
    h_V_fu_570_p2 <= std_logic_vector(unsigned(tmp_5_fu_566_p1) + unsigned(phi_mul1_reg_238));
    i_fu_519_p2 <= std_logic_vector(unsigned(i_op_assign_s_reg_227) + unsigned(ap_const_lv16_1));
    i_op_assign_18_cast6_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op_assign_reg_216),32));
    ii_fu_560_p2 <= std_logic_vector(unsigned(i_op_assign_2_reg_306) + unsigned(ap_const_lv8_1));
    j_fu_549_p2 <= std_logic_vector(unsigned(i_op_assign_1_reg_261) + unsigned(ap_const_lv16_1));
    jj_fu_593_p2 <= std_logic_vector(unsigned(i_op_assign_3_reg_329) + unsigned(ap_const_lv8_1));
    lhs_V_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Kx_V),16));
    next_mul1_fu_504_p2 <= std_logic_vector(unsigned(ret_V_5_reg_250) + unsigned(rhs_V_1_cast_reg_1024));
    next_mul2_fu_509_p2 <= std_logic_vector(unsigned(phi_mul1_reg_238) + unsigned(rhs_V_reg_962));
    next_mul9_fu_534_p2 <= std_logic_vector(unsigned(phi_mul8_reg_284) + unsigned(lhs_V_reg_955));
    next_mul_fu_539_p2 <= std_logic_vector(unsigned(ret_V_10_reg_272) + unsigned(rhs_V_1_reg_1005));
    notlhs1_fu_777_p2 <= "0" when (tmp_fu_746_p4 = ap_const_lv8_FF) else "1";
    notlhs2_fu_795_p2 <= "0" when (tmp_12_fu_763_p4 = ap_const_lv8_FF) else "1";
    notlhs3_fu_706_p2 <= "0" when (tmp_21_fu_674_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_688_p2 <= "0" when (tmp_19_fu_657_p4 = ap_const_lv8_FF) else "1";
    notrhs1_fu_783_p2 <= "1" when (tmp_11_fu_756_p1 = ap_const_lv23_0) else "0";
    notrhs2_fu_801_p2 <= "1" when (tmp_13_fu_773_p1 = ap_const_lv23_0) else "0";
    notrhs3_fu_712_p2 <= "1" when (tmp_22_fu_684_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_694_p2 <= "1" when (tmp_20_fu_667_p1 = ap_const_lv23_0) else "0";
    p_sum_fu_477_p3 <= 
        sum_fu_463_p3 when (tmp_1_fu_471_p2(0) = '1') else 
        ap_const_lv32_DBB1A2BC;
    ret_V_12_fu_634_p2 <= std_logic_vector(unsigned(rhs_V_7_cast_reg_1052) + unsigned(grp_fu_897_p3));
    ret_V_15_fu_612_p2 <= std_logic_vector(unsigned(rhs_V_7_cast_reg_1052) + unsigned(grp_fu_890_p3));
    ret_V_2_fu_529_p0 <= ret_V_2_fu_529_p00(32 - 1 downto 0);
    ret_V_2_fu_529_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_5_reg_250),48));
    ret_V_2_fu_529_p1 <= rhs_V_2_cast_reg_1029(16 - 1 downto 0);
    ret_V_2_fu_529_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_2_fu_529_p0) * unsigned(ret_V_2_fu_529_p1), 48));
    ret_V_3_fu_885_p1 <= rhs_V_1_reg_1005(16 - 1 downto 0);
    ret_V_4_fu_583_p0 <= ret_V_3_reg_1108;
    ret_V_4_fu_583_p1 <= rhs_V_2_reg_1014(16 - 1 downto 0);
    ret_V_4_fu_583_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ret_V_4_fu_583_p0) * signed('0' &ret_V_4_fu_583_p1))), 48));
    ret_V_8_fu_834_p2 <= std_logic_vector(unsigned(rhs_V_7_cast_reg_1052) + unsigned(grp_fu_904_p3));
    ret_V_fu_426_p0 <= rhs_V_reg_962(8 - 1 downto 0);
    ret_V_fu_426_p1 <= lhs_V_reg_955(8 - 1 downto 0);
    ret_V_fu_426_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_426_p0) * unsigned(ret_V_fu_426_p1), 16));
    rhs_V_1_cast_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_410_p2),32));
    rhs_V_1_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(CHin_V_read_reg_938),32));
    rhs_V_2_cast_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(CHin_V_read_reg_938),48));
    rhs_V_2_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Win_V_read_reg_927),48));
    rhs_V_7_cast_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op_assign_reg_216),48));
    rhs_V_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Ky_V),16));
    sum_3_feature_in_loa_fu_735_p3 <= 
        sum_3_reg_317 when (tmp_27_fu_730_p2(0) = '1') else 
        gmem_addr_3_read_reg_1147;
    sum_3_to_int1_fu_653_p1 <= sum_3_reg_317;
    sum_3_to_int_fu_742_p1 <= sum_3_reg_317;
    sum_fu_463_p3 <= 
        ap_const_lv32_0 when (tmp_6_fu_440_p2(0) = '1') else 
        ap_const_lv32_5BB1A2BC;
    tmp1_cast_fu_858_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_853_p2),48));
    tmp1_fu_853_p2 <= std_logic_vector(unsigned(i_op_assign_18_cast6_reg_1039) + unsigned(ret_V_10_reg_272));
    tmp_11_fu_756_p1 <= sum_3_to_int_fu_742_p1(23 - 1 downto 0);
    tmp_12_fu_763_p4 <= feature_in_load_1_to_fu_760_p1(30 downto 23);
    tmp_13_fu_773_p1 <= feature_in_load_1_to_fu_760_p1(23 - 1 downto 0);
    tmp_14_fu_789_p2 <= (notrhs1_fu_783_p2 or notlhs1_fu_777_p2);
    tmp_15_fu_807_p2 <= (notrhs2_fu_801_p2 or notlhs2_fu_795_p2);
    tmp_16_cast_cast_fu_867_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_reg_1202),49));
    tmp_16_fu_813_p2 <= (tmp_15_fu_807_p2 and tmp_14_fu_789_p2);
    tmp_18_fu_819_p2 <= (tmp_17_reg_1166 and tmp_16_fu_813_p2);
    tmp_19_fu_657_p4 <= sum_3_to_int1_fu_653_p1(30 downto 23);
    tmp_1_fu_471_p2 <= (tmp_7_fu_445_p2 or tmp_6_fu_440_p2);
    tmp_20_fu_667_p1 <= sum_3_to_int1_fu_653_p1(23 - 1 downto 0);
    tmp_21_fu_674_p4 <= feature_in_load_2_to_fu_671_p1(30 downto 23);
    tmp_22_fu_684_p1 <= feature_in_load_2_to_fu_671_p1(23 - 1 downto 0);
    tmp_23_fu_700_p2 <= (notrhs_fu_694_p2 or notlhs_fu_688_p2);
    tmp_24_fu_718_p2 <= (notrhs3_fu_712_p2 or notlhs3_fu_706_p2);
    tmp_25_fu_724_p2 <= (tmp_24_fu_718_p2 and tmp_23_fu_700_p2);
    tmp_27_fu_730_p2 <= (tmp_26_reg_1161 and tmp_25_fu_724_p2);
    tmp_30_cast_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_945),49));
    tmp_31_cast_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_950),48));
    tmp_5_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_2_reg_306),16));
    tmp_6_fu_440_p2 <= "1" when (mode_V_read_reg_911 = ap_const_lv2_0) else "0";
    tmp_7_fu_445_p2 <= "1" when (mode_V_read_reg_911 = ap_const_lv2_1) else "0";
    tmp_8_fu_862_p2 <= std_logic_vector(unsigned(ret_V_2_reg_1077) + unsigned(tmp1_cast_fu_858_p1));
    tmp_9_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_3_reg_329),16));
    tmp_fu_746_p4 <= sum_3_to_int_fu_742_p1(30 downto 23);
    w_V_fu_603_p2 <= std_logic_vector(unsigned(phi_mul8_reg_284) + unsigned(tmp_9_fu_599_p1));
end behav;
