// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Pool,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=11.265800,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=10,HLS_SYN_FF=3860,HLS_SYN_LUT=5011,HLS_VERSION=2018_3}" *)

module Pool (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 76'd1;
parameter    ap_ST_fsm_state2 = 76'd2;
parameter    ap_ST_fsm_state3 = 76'd4;
parameter    ap_ST_fsm_state4 = 76'd8;
parameter    ap_ST_fsm_state5 = 76'd16;
parameter    ap_ST_fsm_state6 = 76'd32;
parameter    ap_ST_fsm_state7 = 76'd64;
parameter    ap_ST_fsm_state8 = 76'd128;
parameter    ap_ST_fsm_state9 = 76'd256;
parameter    ap_ST_fsm_state10 = 76'd512;
parameter    ap_ST_fsm_state11 = 76'd1024;
parameter    ap_ST_fsm_state12 = 76'd2048;
parameter    ap_ST_fsm_state13 = 76'd4096;
parameter    ap_ST_fsm_state14 = 76'd8192;
parameter    ap_ST_fsm_state15 = 76'd16384;
parameter    ap_ST_fsm_state16 = 76'd32768;
parameter    ap_ST_fsm_state17 = 76'd65536;
parameter    ap_ST_fsm_state18 = 76'd131072;
parameter    ap_ST_fsm_state19 = 76'd262144;
parameter    ap_ST_fsm_state20 = 76'd524288;
parameter    ap_ST_fsm_state21 = 76'd1048576;
parameter    ap_ST_fsm_state22 = 76'd2097152;
parameter    ap_ST_fsm_state23 = 76'd4194304;
parameter    ap_ST_fsm_state24 = 76'd8388608;
parameter    ap_ST_fsm_state25 = 76'd16777216;
parameter    ap_ST_fsm_state26 = 76'd33554432;
parameter    ap_ST_fsm_state27 = 76'd67108864;
parameter    ap_ST_fsm_state28 = 76'd134217728;
parameter    ap_ST_fsm_state29 = 76'd268435456;
parameter    ap_ST_fsm_state30 = 76'd536870912;
parameter    ap_ST_fsm_state31 = 76'd1073741824;
parameter    ap_ST_fsm_state32 = 76'd2147483648;
parameter    ap_ST_fsm_state33 = 76'd4294967296;
parameter    ap_ST_fsm_state34 = 76'd8589934592;
parameter    ap_ST_fsm_state35 = 76'd17179869184;
parameter    ap_ST_fsm_state36 = 76'd34359738368;
parameter    ap_ST_fsm_state37 = 76'd68719476736;
parameter    ap_ST_fsm_state38 = 76'd137438953472;
parameter    ap_ST_fsm_state39 = 76'd274877906944;
parameter    ap_ST_fsm_state40 = 76'd549755813888;
parameter    ap_ST_fsm_state41 = 76'd1099511627776;
parameter    ap_ST_fsm_state42 = 76'd2199023255552;
parameter    ap_ST_fsm_state43 = 76'd4398046511104;
parameter    ap_ST_fsm_state44 = 76'd8796093022208;
parameter    ap_ST_fsm_state45 = 76'd17592186044416;
parameter    ap_ST_fsm_state46 = 76'd35184372088832;
parameter    ap_ST_fsm_state47 = 76'd70368744177664;
parameter    ap_ST_fsm_state48 = 76'd140737488355328;
parameter    ap_ST_fsm_state49 = 76'd281474976710656;
parameter    ap_ST_fsm_state50 = 76'd562949953421312;
parameter    ap_ST_fsm_state51 = 76'd1125899906842624;
parameter    ap_ST_fsm_state52 = 76'd2251799813685248;
parameter    ap_ST_fsm_state53 = 76'd4503599627370496;
parameter    ap_ST_fsm_state54 = 76'd9007199254740992;
parameter    ap_ST_fsm_state55 = 76'd18014398509481984;
parameter    ap_ST_fsm_state56 = 76'd36028797018963968;
parameter    ap_ST_fsm_state57 = 76'd72057594037927936;
parameter    ap_ST_fsm_state58 = 76'd144115188075855872;
parameter    ap_ST_fsm_state59 = 76'd288230376151711744;
parameter    ap_ST_fsm_state60 = 76'd576460752303423488;
parameter    ap_ST_fsm_state61 = 76'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 76'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 76'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 76'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 76'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 76'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 76'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 76'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 76'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 76'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 76'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 76'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 76'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 76'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 76'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 76'd37778931862957161709568;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [75:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [15:0] CHin_V;
wire   [15:0] Hin_V;
wire   [15:0] Win_V;
wire   [7:0] Kx_V;
wire   [7:0] Ky_V;
wire   [1:0] mode_V;
wire   [31:0] feature_in;
wire   [31:0] feature_out;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state39;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state28;
reg   [1:0] mode_V_read_reg_911;
wire    ap_CS_fsm_state35;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state70;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state71;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state76;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [7:0] Ky_V_read_reg_917;
reg   [7:0] Kx_V_read_reg_922;
reg   [15:0] Win_V_read_reg_927;
reg   [15:0] CHin_V_read_reg_938;
reg   [29:0] tmp_2_reg_945;
reg   [29:0] tmp_3_reg_950;
wire   [15:0] lhs_V_fu_406_p1;
reg   [15:0] lhs_V_reg_955;
wire   [15:0] rhs_V_fu_416_p1;
reg   [15:0] rhs_V_reg_962;
wire   [15:0] ret_V_fu_426_p2;
reg   [15:0] ret_V_reg_969;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire   [48:0] tmp_30_cast_fu_434_p1;
reg   [48:0] tmp_30_cast_reg_979;
wire    ap_CS_fsm_state20;
wire   [47:0] tmp_31_cast_fu_437_p1;
reg   [47:0] tmp_31_cast_reg_984;
wire   [15:0] grp_fu_410_p2;
reg   [15:0] ret_V_16_reg_991;
wire   [15:0] grp_fu_420_p2;
reg   [15:0] tmp_4_reg_996;
wire   [0:0] tmp_6_fu_440_p2;
reg   [0:0] tmp_6_reg_1001;
wire   [31:0] rhs_V_1_fu_450_p1;
reg   [31:0] rhs_V_1_reg_1005;
wire   [47:0] rhs_V_2_fu_453_p1;
reg   [47:0] rhs_V_2_reg_1014;
wire   [31:0] grp_fu_378_p1;
reg   [31:0] tmp_s_reg_1019;
wire   [31:0] rhs_V_1_cast_fu_456_p1;
reg   [31:0] rhs_V_1_cast_reg_1024;
wire   [47:0] rhs_V_2_cast_fu_460_p1;
reg   [47:0] rhs_V_2_cast_reg_1029;
wire   [31:0] p_sum_fu_477_p3;
reg   [31:0] p_sum_reg_1034;
wire   [31:0] i_op_assign_18_cast6_fu_485_p1;
reg   [31:0] i_op_assign_18_cast6_reg_1039;
wire    ap_CS_fsm_state21;
wire   [15:0] c_fu_494_p2;
reg   [15:0] c_reg_1047;
wire   [47:0] rhs_V_7_cast_fu_500_p1;
reg   [47:0] rhs_V_7_cast_reg_1052;
wire   [0:0] exitcond1_fu_489_p2;
wire   [31:0] next_mul1_fu_504_p2;
reg   [31:0] next_mul1_reg_1059;
wire    ap_CS_fsm_state22;
wire   [15:0] next_mul2_fu_509_p2;
reg   [15:0] next_mul2_reg_1064;
wire   [15:0] i_fu_519_p2;
reg   [15:0] i_reg_1072;
wire   [47:0] ret_V_2_fu_529_p2;
reg   [47:0] ret_V_2_reg_1077;
wire   [0:0] exitcond2_fu_514_p2;
wire   [15:0] next_mul9_fu_534_p2;
reg   [15:0] next_mul9_reg_1082;
wire    ap_CS_fsm_state23;
wire   [31:0] next_mul_fu_539_p2;
reg   [31:0] next_mul_reg_1087;
wire   [15:0] j_fu_549_p2;
reg   [15:0] j_reg_1095;
wire   [7:0] ii_fu_560_p2;
reg   [7:0] ii_reg_1103;
wire    ap_CS_fsm_state24;
wire  signed [31:0] ret_V_3_fu_885_p2;
reg  signed [31:0] ret_V_3_reg_1108;
wire   [0:0] exitcond3_fu_555_p2;
wire   [47:0] ret_V_4_fu_583_p2;
reg   [47:0] ret_V_4_reg_1113;
wire    ap_CS_fsm_state25;
wire   [7:0] jj_fu_593_p2;
reg   [7:0] jj_reg_1123;
wire    ap_CS_fsm_state26;
wire  signed [15:0] w_V_fu_603_p2;
reg  signed [15:0] w_V_reg_1128;
wire   [0:0] exitcond4_fu_588_p2;
reg   [31:0] gmem_addr_3_reg_1135;
wire    ap_CS_fsm_state27;
reg   [31:0] gmem_addr_2_reg_1141;
reg   [31:0] gmem_addr_3_read_reg_1147;
reg    ap_block_state35;
reg   [31:0] gmem_addr_2_read_reg_1154;
wire   [0:0] grp_fu_381_p2;
reg   [0:0] tmp_26_reg_1161;
wire    ap_CS_fsm_state36;
reg   [0:0] tmp_17_reg_1166;
wire   [31:0] sum_3_feature_in_loa_fu_735_p3;
wire    ap_CS_fsm_state37;
wire   [31:0] feature_in_load_1_su_fu_824_p3;
reg   [31:0] gmem_addr_1_reg_1181;
wire    ap_CS_fsm_state38;
reg   [31:0] gmem_addr_1_read_reg_1187;
wire   [31:0] grp_fu_368_p2;
reg   [31:0] sum_2_reg_1192;
wire    ap_CS_fsm_state51;
wire   [31:0] grp_fu_373_p2;
wire    ap_CS_fsm_state68;
wire   [47:0] tmp_8_fu_862_p2;
reg   [47:0] tmp_8_reg_1202;
reg   [31:0] gmem_addr_reg_1207;
wire    ap_CS_fsm_state69;
reg   [15:0] op_assign_reg_216;
reg   [15:0] i_op_assign_s_reg_227;
wire   [0:0] exitcond_fu_544_p2;
reg   [15:0] phi_mul1_reg_238;
reg   [31:0] ret_V_5_reg_250;
reg   [15:0] i_op_assign_1_reg_261;
reg   [31:0] ret_V_10_reg_272;
reg   [15:0] phi_mul8_reg_284;
reg   [31:0] i_op_assign_reg_296;
reg   [7:0] i_op_assign_2_reg_306;
reg   [31:0] sum_3_reg_317;
wire    ap_CS_fsm_state53;
reg   [7:0] i_op_assign_3_reg_329;
reg   [31:0] sum_3_be_reg_340;
wire    ap_CS_fsm_state52;
reg   [31:0] sum_5_reg_356;
wire  signed [63:0] feature_in2_sum_cast_fu_621_p1;
wire  signed [63:0] feature_in2_sum5_cas_fu_643_p1;
wire  signed [63:0] feature_in2_sum6_cas_fu_843_p1;
wire   [63:0] feature_out4_sum_cas_fu_875_p1;
reg    ap_reg_ioackin_gmem_ARREADY;
reg    ap_sig_ioackin_gmem_ARREADY;
reg    ap_block_state28_io;
reg    ap_reg_ioackin_gmem_AWREADY;
reg    ap_sig_ioackin_gmem_AWREADY;
reg    ap_reg_ioackin_gmem_WREADY;
reg    ap_sig_ioackin_gmem_WREADY;
wire    ap_CS_fsm_state47;
wire   [31:0] grp_fu_378_p0;
reg   [31:0] grp_fu_381_p1;
wire   [7:0] grp_fu_410_p1;
wire   [7:0] grp_fu_420_p1;
wire   [7:0] ret_V_fu_426_p0;
wire   [7:0] ret_V_fu_426_p1;
wire   [0:0] tmp_7_fu_445_p2;
wire   [0:0] tmp_1_fu_471_p2;
wire   [31:0] sum_fu_463_p3;
wire   [31:0] ret_V_2_fu_529_p0;
wire   [15:0] ret_V_2_fu_529_p1;
wire   [15:0] tmp_5_fu_566_p1;
wire  signed [15:0] h_V_fu_570_p2;
wire  signed [31:0] ret_V_4_fu_583_p0;
wire   [15:0] ret_V_4_fu_583_p1;
wire   [15:0] tmp_9_fu_599_p1;
wire  signed [47:0] grp_fu_890_p3;
(* use_dsp48 = "no" *) wire   [47:0] ret_V_15_fu_612_p2;
wire   [47:0] feature_in2_sum_fu_616_p2;
wire  signed [47:0] grp_fu_897_p3;
(* use_dsp48 = "no" *) wire   [47:0] ret_V_12_fu_634_p2;
wire   [47:0] feature_in2_sum5_fu_638_p2;
wire   [31:0] sum_3_to_int1_fu_653_p1;
wire   [31:0] feature_in_load_2_to_fu_671_p1;
wire   [7:0] tmp_19_fu_657_p4;
wire   [22:0] tmp_20_fu_667_p1;
wire   [0:0] notrhs_fu_694_p2;
wire   [0:0] notlhs_fu_688_p2;
wire   [7:0] tmp_21_fu_674_p4;
wire   [22:0] tmp_22_fu_684_p1;
wire   [0:0] notrhs3_fu_712_p2;
wire   [0:0] notlhs3_fu_706_p2;
wire   [0:0] tmp_23_fu_700_p2;
wire   [0:0] tmp_24_fu_718_p2;
wire   [0:0] tmp_25_fu_724_p2;
wire   [0:0] tmp_27_fu_730_p2;
wire   [31:0] sum_3_to_int_fu_742_p1;
wire   [31:0] feature_in_load_1_to_fu_760_p1;
wire   [7:0] tmp_fu_746_p4;
wire   [22:0] tmp_11_fu_756_p1;
wire   [0:0] notrhs1_fu_783_p2;
wire   [0:0] notlhs1_fu_777_p2;
wire   [7:0] tmp_12_fu_763_p4;
wire   [22:0] tmp_13_fu_773_p1;
wire   [0:0] notrhs2_fu_801_p2;
wire   [0:0] notlhs2_fu_795_p2;
wire   [0:0] tmp_14_fu_789_p2;
wire   [0:0] tmp_15_fu_807_p2;
wire   [0:0] tmp_16_fu_813_p2;
wire   [0:0] tmp_18_fu_819_p2;
wire  signed [47:0] grp_fu_904_p3;
(* use_dsp48 = "no" *) wire   [47:0] ret_V_8_fu_834_p2;
wire   [47:0] feature_in2_sum6_fu_838_p2;
wire   [31:0] tmp1_fu_853_p2;
wire   [47:0] tmp1_cast_fu_858_p1;
wire   [48:0] tmp_16_cast_cast_fu_867_p1;
wire   [48:0] feature_out4_sum_fu_870_p2;
wire   [15:0] ret_V_3_fu_885_p1;
wire   [15:0] grp_fu_890_p0;
wire   [15:0] grp_fu_897_p0;
wire   [15:0] grp_fu_904_p0;
reg    grp_fu_410_ap_start;
wire    grp_fu_410_ap_done;
reg    grp_fu_420_ap_start;
wire    grp_fu_420_ap_done;
reg   [75:0] ap_NS_fsm;
wire   [15:0] grp_fu_410_p10;
wire   [15:0] grp_fu_420_p10;
wire   [47:0] ret_V_2_fu_529_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 76'd1;
#0 ap_reg_ioackin_gmem_ARREADY = 1'b0;
#0 ap_reg_ioackin_gmem_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem_WREADY = 1'b0;
end

Pool_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
Pool_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .CHin_V(CHin_V),
    .Hin_V(Hin_V),
    .Win_V(Win_V),
    .Kx_V(Kx_V),
    .Ky_V(Ky_V),
    .mode_V(mode_V),
    .feature_in(feature_in),
    .feature_out(feature_out)
);

Pool_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
Pool_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_reg_1207),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(sum_5_reg_356),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

Pool_fadd_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Pool_fadd_32ns_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(sum_3_reg_317),
    .din1(gmem_addr_1_read_reg_1187),
    .ce(1'b1),
    .dout(grp_fu_368_p2)
);

Pool_fdiv_32ns_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Pool_fdiv_32ns_32cud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(i_op_assign_reg_296),
    .din1(tmp_s_reg_1019),
    .ce(1'b1),
    .dout(grp_fu_373_p2)
);

Pool_uitofp_32ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Pool_uitofp_32ns_dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_378_p0),
    .ce(1'b1),
    .dout(grp_fu_378_p1)
);

Pool_fcmp_32ns_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
Pool_fcmp_32ns_32eOg_U4(
    .din0(sum_3_reg_317),
    .din1(grp_fu_381_p1),
    .opcode(5'd2),
    .dout(grp_fu_381_p2)
);

Pool_udiv_16ns_8nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 20 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
Pool_udiv_16ns_8nfYi_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_410_ap_start),
    .done(grp_fu_410_ap_done),
    .din0(Win_V),
    .din1(grp_fu_410_p1),
    .ce(1'b1),
    .dout(grp_fu_410_p2)
);

Pool_udiv_16ns_8nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 20 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
Pool_udiv_16ns_8nfYi_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_420_ap_start),
    .done(grp_fu_420_ap_done),
    .din0(Hin_V),
    .din1(grp_fu_420_p1),
    .ce(1'b1),
    .dout(grp_fu_420_p2)
);

Pool_mul_mul_16s_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Pool_mul_mul_16s_g8j_U7(
    .din0(h_V_fu_570_p2),
    .din1(ret_V_3_fu_885_p1),
    .dout(ret_V_3_fu_885_p2)
);

Pool_mac_muladd_1hbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 48 ),
    .dout_WIDTH( 48 ))
Pool_mac_muladd_1hbi_U8(
    .din0(grp_fu_890_p0),
    .din1(w_V_reg_1128),
    .din2(ret_V_4_reg_1113),
    .dout(grp_fu_890_p3)
);

Pool_mac_muladd_1hbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 48 ),
    .dout_WIDTH( 48 ))
Pool_mac_muladd_1hbi_U9(
    .din0(grp_fu_897_p0),
    .din1(w_V_reg_1128),
    .din2(ret_V_4_reg_1113),
    .dout(grp_fu_897_p3)
);

Pool_mac_muladd_1hbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 48 ),
    .dout_WIDTH( 48 ))
Pool_mac_muladd_1hbi_U10(
    .din0(grp_fu_904_p0),
    .din1(w_V_reg_1128),
    .din2(ret_V_4_reg_1113),
    .dout(grp_fu_904_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_ARREADY <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_state28_io) & (1'b1 == ap_CS_fsm_state28) & (mode_V_read_reg_911 == 2'd2)) | ((1'b0 == ap_block_state28_io) & (1'b1 == ap_CS_fsm_state28) & (mode_V_read_reg_911 == 2'd1)) | ((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state39)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b0;
        end else if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state28) & (mode_V_read_reg_911 == 2'd2)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state28) & (mode_V_read_reg_911 == 2'd1)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state39)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state70)) begin
            if ((ap_sig_ioackin_gmem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b0;
            end else if ((gmem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state71)) begin
            if ((ap_sig_ioackin_gmem_WREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b0;
            end else if ((gmem_WREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_514_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        i_op_assign_1_reg_261 <= 16'd0;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
        i_op_assign_1_reg_261 <= j_reg_1095;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_544_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        i_op_assign_2_reg_306 <= 8'd0;
    end else if (((exitcond4_fu_588_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        i_op_assign_2_reg_306 <= ii_reg_1103;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        i_op_assign_3_reg_329 <= jj_reg_1123;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        i_op_assign_3_reg_329 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_544_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        i_op_assign_reg_296 <= p_sum_reg_1034;
    end else if (((exitcond4_fu_588_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        i_op_assign_reg_296 <= sum_3_reg_317;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_544_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        i_op_assign_s_reg_227 <= i_reg_1072;
    end else if (((exitcond1_fu_489_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        i_op_assign_s_reg_227 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_514_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        op_assign_reg_216 <= c_reg_1047;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        op_assign_reg_216 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_544_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        phi_mul1_reg_238 <= next_mul2_reg_1064;
    end else if (((exitcond1_fu_489_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        phi_mul1_reg_238 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_514_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        phi_mul8_reg_284 <= 16'd0;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
        phi_mul8_reg_284 <= next_mul9_reg_1082;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_514_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        ret_V_10_reg_272 <= 32'd0;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
        ret_V_10_reg_272 <= next_mul_reg_1087;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_544_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        ret_V_5_reg_250 <= next_mul1_reg_1059;
    end else if (((exitcond1_fu_489_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        ret_V_5_reg_250 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) & (mode_V_read_reg_911 == 2'd2))) begin
        sum_3_be_reg_340 <= sum_3_feature_in_loa_fu_735_p3;
    end else if (((1'b1 == ap_CS_fsm_state37) & (mode_V_read_reg_911 == 2'd1))) begin
        sum_3_be_reg_340 <= feature_in_load_1_su_fu_824_p3;
    end else if (((exitcond4_fu_588_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26) & (mode_V_read_reg_911 == 2'd3))) begin
        sum_3_be_reg_340 <= sum_3_reg_317;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        sum_3_be_reg_340 <= sum_2_reg_1192;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        sum_3_reg_317 <= sum_3_be_reg_340;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        sum_3_reg_317 <= i_op_assign_reg_296;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_555_p2 == 1'd1) & (tmp_6_reg_1001 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        sum_5_reg_356 <= i_op_assign_reg_296;
    end else if (((tmp_6_reg_1001 == 1'd1) & (1'b1 == ap_CS_fsm_state68))) begin
        sum_5_reg_356 <= grp_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        CHin_V_read_reg_938 <= CHin_V;
        Kx_V_read_reg_922 <= Kx_V;
        Ky_V_read_reg_917 <= Ky_V;
        Win_V_read_reg_927 <= Win_V;
        lhs_V_reg_955[7 : 0] <= lhs_V_fu_406_p1[7 : 0];
        mode_V_read_reg_911 <= mode_V;
        rhs_V_reg_962[7 : 0] <= rhs_V_fu_416_p1[7 : 0];
        tmp_2_reg_945 <= {{feature_out[31:2]}};
        tmp_3_reg_950 <= {{feature_in[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        c_reg_1047 <= c_fu_494_p2;
        i_op_assign_18_cast6_reg_1039[15 : 0] <= i_op_assign_18_cast6_fu_485_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
        gmem_addr_1_read_reg_1187 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        gmem_addr_1_reg_1181 <= feature_in2_sum6_cas_fu_843_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((gmem_RVALID == 1'b0) & (mode_V_read_reg_911 == 2'd2)) | ((gmem_RVALID == 1'b0) & (mode_V_read_reg_911 == 2'd1))) & (1'b1 == ap_CS_fsm_state35) & (mode_V_read_reg_911 == 2'd1))) begin
        gmem_addr_2_read_reg_1154 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) & (mode_V_read_reg_911 == 2'd1))) begin
        gmem_addr_2_reg_1141 <= feature_in2_sum5_cas_fu_643_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((gmem_RVALID == 1'b0) & (mode_V_read_reg_911 == 2'd2)) | ((gmem_RVALID == 1'b0) & (mode_V_read_reg_911 == 2'd1))) & (1'b1 == ap_CS_fsm_state35) & (mode_V_read_reg_911 == 2'd2))) begin
        gmem_addr_3_read_reg_1147 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) & (mode_V_read_reg_911 == 2'd2))) begin
        gmem_addr_3_reg_1135 <= feature_in2_sum_cast_fu_621_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        gmem_addr_reg_1207 <= feature_out4_sum_cas_fu_875_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        i_reg_1072 <= i_fu_519_p2;
        next_mul1_reg_1059 <= next_mul1_fu_504_p2;
        next_mul2_reg_1064 <= next_mul2_fu_509_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        ii_reg_1103 <= ii_fu_560_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        j_reg_1095 <= j_fu_549_p2;
        next_mul9_reg_1082 <= next_mul9_fu_534_p2;
        next_mul_reg_1087 <= next_mul_fu_539_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        jj_reg_1123 <= jj_fu_593_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        p_sum_reg_1034[5 : 2] <= p_sum_fu_477_p3[5 : 2];
p_sum_reg_1034[7] <= p_sum_fu_477_p3[7];
p_sum_reg_1034[9] <= p_sum_fu_477_p3[9];
p_sum_reg_1034[13] <= p_sum_fu_477_p3[13];
p_sum_reg_1034[16 : 15] <= p_sum_fu_477_p3[16 : 15];
p_sum_reg_1034[21 : 20] <= p_sum_fu_477_p3[21 : 20];
p_sum_reg_1034[25 : 23] <= p_sum_fu_477_p3[25 : 23];
p_sum_reg_1034[28 : 27] <= p_sum_fu_477_p3[28 : 27];
p_sum_reg_1034[31 : 30] <= p_sum_fu_477_p3[31 : 30];
        ret_V_16_reg_991 <= grp_fu_410_p2;
        rhs_V_1_cast_reg_1024[15 : 0] <= rhs_V_1_cast_fu_456_p1[15 : 0];
        rhs_V_1_reg_1005[15 : 0] <= rhs_V_1_fu_450_p1[15 : 0];
        rhs_V_2_cast_reg_1029[15 : 0] <= rhs_V_2_cast_fu_460_p1[15 : 0];
        rhs_V_2_reg_1014[15 : 0] <= rhs_V_2_fu_453_p1[15 : 0];
        tmp_30_cast_reg_979[29 : 0] <= tmp_30_cast_fu_434_p1[29 : 0];
        tmp_31_cast_reg_984[29 : 0] <= tmp_31_cast_fu_437_p1[29 : 0];
        tmp_4_reg_996 <= grp_fu_420_p2;
        tmp_6_reg_1001 <= tmp_6_fu_440_p2;
        tmp_s_reg_1019 <= grp_fu_378_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_514_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        ret_V_2_reg_1077 <= ret_V_2_fu_529_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_555_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        ret_V_3_reg_1108 <= ret_V_3_fu_885_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        ret_V_4_reg_1113 <= ret_V_4_fu_583_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ret_V_reg_969 <= ret_V_fu_426_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_489_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        rhs_V_7_cast_reg_1052[15 : 0] <= rhs_V_7_cast_fu_500_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        sum_2_reg_1192 <= grp_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state36) & (mode_V_read_reg_911 == 2'd1))) begin
        tmp_17_reg_1166 <= grp_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state36) & (mode_V_read_reg_911 == 2'd2))) begin
        tmp_26_reg_1161 <= grp_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        tmp_8_reg_1202 <= tmp_8_fu_862_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_588_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        w_V_reg_1128 <= w_V_fu_603_p2;
    end
end

always @ (*) begin
    if (((exitcond1_fu_489_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_489_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_AWREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY;
    end else begin
        ap_sig_ioackin_gmem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_WREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY;
    end else begin
        ap_sig_ioackin_gmem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state39)) begin
            gmem_ARADDR = gmem_addr_1_reg_1181;
        end else if (((1'b1 == ap_CS_fsm_state28) & (mode_V_read_reg_911 == 2'd1))) begin
            gmem_ARADDR = gmem_addr_2_reg_1141;
        end else if (((1'b1 == ap_CS_fsm_state28) & (mode_V_read_reg_911 == 2'd2))) begin
            gmem_ARADDR = gmem_addr_3_reg_1135;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state28) & (mode_V_read_reg_911 == 2'd2)) | ((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state28) & (mode_V_read_reg_911 == 2'd1)) | ((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state39)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state70))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((~(((gmem_RVALID == 1'b0) & (mode_V_read_reg_911 == 2'd2)) | ((gmem_RVALID == 1'b0) & (mode_V_read_reg_911 == 2'd1))) & (1'b1 == ap_CS_fsm_state35) & (mode_V_read_reg_911 == 2'd2)) | (~(((gmem_RVALID == 1'b0) & (mode_V_read_reg_911 == 2'd2)) | ((gmem_RVALID == 1'b0) & (mode_V_read_reg_911 == 2'd1))) & (1'b1 == ap_CS_fsm_state35) & (mode_V_read_reg_911 == 2'd1)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state46)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state71))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | ((1'b1 == ap_CS_fsm_state28) & (mode_V_read_reg_911 == 2'd2)) | ((1'b1 == ap_CS_fsm_state28) & (mode_V_read_reg_911 == 2'd1)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | ((1'b1 == ap_CS_fsm_state35) & (mode_V_read_reg_911 == 2'd2)) | ((1'b1 == ap_CS_fsm_state35) & (mode_V_read_reg_911 == 2'd1)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        if ((mode_V_read_reg_911 == 2'd1)) begin
            grp_fu_381_p1 = gmem_addr_2_read_reg_1154;
        end else if ((mode_V_read_reg_911 == 2'd2)) begin
            grp_fu_381_p1 = gmem_addr_3_read_reg_1147;
        end else begin
            grp_fu_381_p1 = 'bx;
        end
    end else begin
        grp_fu_381_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_410_ap_start = 1'b1;
    end else begin
        grp_fu_410_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_420_ap_start = 1'b1;
    end else begin
        grp_fu_420_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((exitcond1_fu_489_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((exitcond2_fu_514_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((exitcond_fu_544_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((exitcond3_fu_555_p2 == 1'd1) & (tmp_6_reg_1001 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else if (((exitcond3_fu_555_p2 == 1'd1) & (tmp_6_reg_1001 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((exitcond4_fu_588_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else if (((exitcond4_fu_588_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26) & (mode_V_read_reg_911 == 2'd3))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else if (((exitcond4_fu_588_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26) & (mode_V_read_reg_911 == 2'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((1'b0 == ap_block_state28_io) & (1'b1 == ap_CS_fsm_state28) & ((mode_V_read_reg_911 == 2'd2) | (mode_V_read_reg_911 == 2'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            if ((~(((gmem_RVALID == 1'b0) & (mode_V_read_reg_911 == 2'd2)) | ((gmem_RVALID == 1'b0) & (mode_V_read_reg_911 == 2'd1))) & (1'b1 == ap_CS_fsm_state35) & ((mode_V_read_reg_911 == 2'd2) | (mode_V_read_reg_911 == 2'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            if (((ap_sig_ioackin_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state70))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end
        end
        ap_ST_fsm_state71 : begin
            if (((ap_sig_ioackin_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state71))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

always @ (*) begin
    ap_block_state28_io = (((ap_sig_ioackin_gmem_ARREADY == 1'b0) & (mode_V_read_reg_911 == 2'd2)) | ((ap_sig_ioackin_gmem_ARREADY == 1'b0) & (mode_V_read_reg_911 == 2'd1)));
end

always @ (*) begin
    ap_block_state35 = (((gmem_RVALID == 1'b0) & (mode_V_read_reg_911 == 2'd2)) | ((gmem_RVALID == 1'b0) & (mode_V_read_reg_911 == 2'd1)));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign c_fu_494_p2 = (op_assign_reg_216 + 16'd1);

assign exitcond1_fu_489_p2 = ((op_assign_reg_216 == CHin_V_read_reg_938) ? 1'b1 : 1'b0);

assign exitcond2_fu_514_p2 = ((i_op_assign_s_reg_227 == tmp_4_reg_996) ? 1'b1 : 1'b0);

assign exitcond3_fu_555_p2 = ((i_op_assign_2_reg_306 == Ky_V_read_reg_917) ? 1'b1 : 1'b0);

assign exitcond4_fu_588_p2 = ((i_op_assign_3_reg_329 == Kx_V_read_reg_922) ? 1'b1 : 1'b0);

assign exitcond_fu_544_p2 = ((i_op_assign_1_reg_261 == ret_V_16_reg_991) ? 1'b1 : 1'b0);

assign feature_in2_sum5_cas_fu_643_p1 = $signed(feature_in2_sum5_fu_638_p2);

assign feature_in2_sum5_fu_638_p2 = (tmp_31_cast_reg_984 + ret_V_12_fu_634_p2);

assign feature_in2_sum6_cas_fu_843_p1 = $signed(feature_in2_sum6_fu_838_p2);

assign feature_in2_sum6_fu_838_p2 = (ret_V_8_fu_834_p2 + tmp_31_cast_reg_984);

assign feature_in2_sum_cast_fu_621_p1 = $signed(feature_in2_sum_fu_616_p2);

assign feature_in2_sum_fu_616_p2 = (tmp_31_cast_reg_984 + ret_V_15_fu_612_p2);

assign feature_in_load_1_su_fu_824_p3 = ((tmp_18_fu_819_p2[0:0] === 1'b1) ? gmem_addr_2_read_reg_1154 : sum_3_reg_317);

assign feature_in_load_1_to_fu_760_p1 = gmem_addr_2_read_reg_1154;

assign feature_in_load_2_to_fu_671_p1 = gmem_addr_3_read_reg_1147;

assign feature_out4_sum_cas_fu_875_p1 = feature_out4_sum_fu_870_p2;

assign feature_out4_sum_fu_870_p2 = (tmp_16_cast_cast_fu_867_p1 + tmp_30_cast_reg_979);

assign grp_fu_378_p0 = ret_V_reg_969;

assign grp_fu_410_p1 = grp_fu_410_p10;

assign grp_fu_410_p10 = Kx_V;

assign grp_fu_420_p1 = grp_fu_420_p10;

assign grp_fu_420_p10 = Ky_V;

assign grp_fu_890_p0 = rhs_V_1_reg_1005;

assign grp_fu_897_p0 = rhs_V_1_reg_1005;

assign grp_fu_904_p0 = rhs_V_1_reg_1005;

assign h_V_fu_570_p2 = (tmp_5_fu_566_p1 + phi_mul1_reg_238);

assign i_fu_519_p2 = (i_op_assign_s_reg_227 + 16'd1);

assign i_op_assign_18_cast6_fu_485_p1 = op_assign_reg_216;

assign ii_fu_560_p2 = (i_op_assign_2_reg_306 + 8'd1);

assign j_fu_549_p2 = (i_op_assign_1_reg_261 + 16'd1);

assign jj_fu_593_p2 = (i_op_assign_3_reg_329 + 8'd1);

assign lhs_V_fu_406_p1 = Kx_V;

assign next_mul1_fu_504_p2 = (ret_V_5_reg_250 + rhs_V_1_cast_reg_1024);

assign next_mul2_fu_509_p2 = (phi_mul1_reg_238 + rhs_V_reg_962);

assign next_mul9_fu_534_p2 = (phi_mul8_reg_284 + lhs_V_reg_955);

assign next_mul_fu_539_p2 = (ret_V_10_reg_272 + rhs_V_1_reg_1005);

assign notlhs1_fu_777_p2 = ((tmp_fu_746_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs2_fu_795_p2 = ((tmp_12_fu_763_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs3_fu_706_p2 = ((tmp_21_fu_674_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_688_p2 = ((tmp_19_fu_657_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs1_fu_783_p2 = ((tmp_11_fu_756_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs2_fu_801_p2 = ((tmp_13_fu_773_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs3_fu_712_p2 = ((tmp_22_fu_684_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_694_p2 = ((tmp_20_fu_667_p1 == 23'd0) ? 1'b1 : 1'b0);

assign p_sum_fu_477_p3 = ((tmp_1_fu_471_p2[0:0] === 1'b1) ? sum_fu_463_p3 : 32'd3685851836);

assign ret_V_12_fu_634_p2 = ($signed(rhs_V_7_cast_reg_1052) + $signed(grp_fu_897_p3));

assign ret_V_15_fu_612_p2 = ($signed(rhs_V_7_cast_reg_1052) + $signed(grp_fu_890_p3));

assign ret_V_2_fu_529_p0 = ret_V_2_fu_529_p00;

assign ret_V_2_fu_529_p00 = ret_V_5_reg_250;

assign ret_V_2_fu_529_p1 = rhs_V_2_cast_reg_1029;

assign ret_V_2_fu_529_p2 = (ret_V_2_fu_529_p0 * ret_V_2_fu_529_p1);

assign ret_V_3_fu_885_p1 = rhs_V_1_reg_1005;

assign ret_V_4_fu_583_p0 = ret_V_3_reg_1108;

assign ret_V_4_fu_583_p1 = rhs_V_2_reg_1014;

assign ret_V_4_fu_583_p2 = ($signed(ret_V_4_fu_583_p0) * $signed({{1'b0}, {ret_V_4_fu_583_p1}}));

assign ret_V_8_fu_834_p2 = ($signed(rhs_V_7_cast_reg_1052) + $signed(grp_fu_904_p3));

assign ret_V_fu_426_p0 = rhs_V_reg_962;

assign ret_V_fu_426_p1 = lhs_V_reg_955;

assign ret_V_fu_426_p2 = (ret_V_fu_426_p0 * ret_V_fu_426_p1);

assign rhs_V_1_cast_fu_456_p1 = grp_fu_410_p2;

assign rhs_V_1_fu_450_p1 = CHin_V_read_reg_938;

assign rhs_V_2_cast_fu_460_p1 = CHin_V_read_reg_938;

assign rhs_V_2_fu_453_p1 = Win_V_read_reg_927;

assign rhs_V_7_cast_fu_500_p1 = op_assign_reg_216;

assign rhs_V_fu_416_p1 = Ky_V;

assign sum_3_feature_in_loa_fu_735_p3 = ((tmp_27_fu_730_p2[0:0] === 1'b1) ? sum_3_reg_317 : gmem_addr_3_read_reg_1147);

assign sum_3_to_int1_fu_653_p1 = sum_3_reg_317;

assign sum_3_to_int_fu_742_p1 = sum_3_reg_317;

assign sum_fu_463_p3 = ((tmp_6_fu_440_p2[0:0] === 1'b1) ? 32'd0 : 32'd1538368188);

assign tmp1_cast_fu_858_p1 = tmp1_fu_853_p2;

assign tmp1_fu_853_p2 = (i_op_assign_18_cast6_reg_1039 + ret_V_10_reg_272);

assign tmp_11_fu_756_p1 = sum_3_to_int_fu_742_p1[22:0];

assign tmp_12_fu_763_p4 = {{feature_in_load_1_to_fu_760_p1[30:23]}};

assign tmp_13_fu_773_p1 = feature_in_load_1_to_fu_760_p1[22:0];

assign tmp_14_fu_789_p2 = (notrhs1_fu_783_p2 | notlhs1_fu_777_p2);

assign tmp_15_fu_807_p2 = (notrhs2_fu_801_p2 | notlhs2_fu_795_p2);

assign tmp_16_cast_cast_fu_867_p1 = tmp_8_reg_1202;

assign tmp_16_fu_813_p2 = (tmp_15_fu_807_p2 & tmp_14_fu_789_p2);

assign tmp_18_fu_819_p2 = (tmp_17_reg_1166 & tmp_16_fu_813_p2);

assign tmp_19_fu_657_p4 = {{sum_3_to_int1_fu_653_p1[30:23]}};

assign tmp_1_fu_471_p2 = (tmp_7_fu_445_p2 | tmp_6_fu_440_p2);

assign tmp_20_fu_667_p1 = sum_3_to_int1_fu_653_p1[22:0];

assign tmp_21_fu_674_p4 = {{feature_in_load_2_to_fu_671_p1[30:23]}};

assign tmp_22_fu_684_p1 = feature_in_load_2_to_fu_671_p1[22:0];

assign tmp_23_fu_700_p2 = (notrhs_fu_694_p2 | notlhs_fu_688_p2);

assign tmp_24_fu_718_p2 = (notrhs3_fu_712_p2 | notlhs3_fu_706_p2);

assign tmp_25_fu_724_p2 = (tmp_24_fu_718_p2 & tmp_23_fu_700_p2);

assign tmp_27_fu_730_p2 = (tmp_26_reg_1161 & tmp_25_fu_724_p2);

assign tmp_30_cast_fu_434_p1 = tmp_2_reg_945;

assign tmp_31_cast_fu_437_p1 = tmp_3_reg_950;

assign tmp_5_fu_566_p1 = i_op_assign_2_reg_306;

assign tmp_6_fu_440_p2 = ((mode_V_read_reg_911 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_7_fu_445_p2 = ((mode_V_read_reg_911 == 2'd1) ? 1'b1 : 1'b0);

assign tmp_8_fu_862_p2 = (ret_V_2_reg_1077 + tmp1_cast_fu_858_p1);

assign tmp_9_fu_599_p1 = i_op_assign_3_reg_329;

assign tmp_fu_746_p4 = {{sum_3_to_int_fu_742_p1[30:23]}};

assign w_V_fu_603_p2 = (phi_mul8_reg_284 + tmp_9_fu_599_p1);

always @ (posedge ap_clk) begin
    lhs_V_reg_955[15:8] <= 8'b00000000;
    rhs_V_reg_962[15:8] <= 8'b00000000;
    tmp_30_cast_reg_979[48:30] <= 19'b0000000000000000000;
    tmp_31_cast_reg_984[47:30] <= 18'b000000000000000000;
    rhs_V_1_reg_1005[31:16] <= 16'b0000000000000000;
    rhs_V_2_reg_1014[47:16] <= 32'b00000000000000000000000000000000;
    rhs_V_1_cast_reg_1024[31:16] <= 16'b0000000000000000;
    rhs_V_2_cast_reg_1029[47:16] <= 32'b00000000000000000000000000000000;
    p_sum_reg_1034[1:0] <= 2'b00;
    p_sum_reg_1034[6:6] <= 1'b0;
    p_sum_reg_1034[8:8] <= 1'b0;
    p_sum_reg_1034[12:10] <= 3'b000;
    p_sum_reg_1034[14:14] <= 1'b0;
    p_sum_reg_1034[19:17] <= 3'b000;
    p_sum_reg_1034[22:22] <= 1'b0;
    p_sum_reg_1034[26:26] <= 1'b0;
    p_sum_reg_1034[29] <= 1'b0;
    i_op_assign_18_cast6_reg_1039[31:16] <= 16'b0000000000000000;
    rhs_V_7_cast_reg_1052[47:16] <= 32'b00000000000000000000000000000000;
end

endmodule //Pool
